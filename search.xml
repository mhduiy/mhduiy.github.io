<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DTK壁纸管理器使用文档</title>
      <link href="/2023/02/27/DTK%E5%A3%81%E7%BA%B8%E7%AE%A1%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
      <url>/2023/02/27/DTK%E5%A3%81%E7%BA%B8%E7%AE%A1%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本项目是一个壁纸管理器的Demo，使用了DIconButton，DSpinner，DImageViewer等 DTK组件，可以查看本地系统壁纸和在线的壁纸，还可以可以实现查看壁纸大图，保存图片设置壁纸等功能</p><blockquote><p>github仓库：<a href="https://github.com/mhduiy/DTKWallpaperManager">https://github.com/mhduiy/DTKWallpaperManager</a></p></blockquote><h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="详细开发文档"><a href="#详细开发文档" class="headerlink" title="详细开发文档"></a>详细开发文档</h2><h3 id="一、安装dtk组件"><a href="#一、安装dtk组件" class="headerlink" title="一、安装dtk组件"></a>一、安装dtk组件</h3><p>因为项目采用许多dtk组件，需要我们提前安装好dtk的各种核心库和依赖</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>一句命令即可安装Dtk相关开发环境</p><p><code>libdtk&#123;core,widget,gui&#125;-dev</code> 等价于 <code>deepin-sdk</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install deepin-sdk qtcreator-template-dtk</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><h5 id="安装-dtkcommon"><a href="#安装-dtkcommon" class="headerlink" title="安装 dtkcommon"></a>安装 dtkcommon</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linuxdeepin/dtkcommon.git -b 5.6.4</span><br><span class="line"><span class="built_in">cd</span> dtkcommon</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt build-dep .</span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">dpkg-buildpackage -us -uc -b</span><br><span class="line"><span class="comment"># 安装上一级目录的所有deb文件，若上一级有其他的deb文件，请手动安装</span></span><br><span class="line">sudo dpkg -i ../*.deb</span><br></pre></td></tr></table></figure><h5 id="安装-dtkcore"><a href="#安装-dtkcore" class="headerlink" title="安装 dtkcore"></a>安装 dtkcore</h5><p>dtkcore 是一个基于Qt的C++库，它提供了一些常用的工具类，以及一些基础的模块，如日志、插件、网络、线程、数据库、文件、图形、音频、视频、系统信息等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linuxdeepin/dtkcommon.git -b 5.6.4</span><br><span class="line"><span class="built_in">cd</span> dtkcommon</span><br><span class="line">sudo apt build-dep .</span><br><span class="line">dpkg-buildpackage -us -uc -b</span><br><span class="line">sudo dpkg -i ../*.deb</span><br></pre></td></tr></table></figure><h5 id="安装-dtkgui"><a href="#安装-dtkgui" class="headerlink" title="安装 dtkgui"></a>安装 dtkgui</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linuxdeepin/dtkcommon.git -b 5.6.4</span><br><span class="line"><span class="built_in">cd</span> dtkcommon</span><br><span class="line">sudo apt build-dep .</span><br><span class="line">dpkg-buildpackage -us -uc -b</span><br><span class="line">sudo dpkg -i ../*.deb</span><br></pre></td></tr></table></figure><h5 id="安装-dtkwidget"><a href="#安装-dtkwidget" class="headerlink" title="安装 dtkwidget"></a>安装 dtkwidget</h5><p>dtkwidget是dtk对于qtwidget的封装与扩充，方便用户快速开发符合dtk视觉风格的应用。其中重写了部分qtwidget的控件，以及提供了一些新的控件，提供给开发者一个更轻松美观的选择。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linuxdeepin/dtkcommon.git -b 5.6.4</span><br><span class="line"><span class="built_in">cd</span> dtkcommon</span><br><span class="line">sudo apt build-dep .</span><br><span class="line">dpkg-buildpackage -us -uc -b</span><br><span class="line">sudo dpkg -i ../*.deb</span><br></pre></td></tr></table></figure><blockquote><p>dtk官方文档链接：<a href="https://docs.deepin.org/info/%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/DTK/%E5%BC%80%E5%8F%91">https://docs.deepin.org/info/%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/DTK/%E5%BC%80%E5%8F%91</a></p></blockquote><h3 id="二、编写CMakeLists-txt"><a href="#二、编写CMakeLists-txt" class="headerlink" title="二、编写CMakeLists.txt"></a>二、编写CMakeLists.txt</h3><p>此处列出完整的CMakeLists.txt文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置需求cmake的最低版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称，版本，语言</span></span><br><span class="line"><span class="keyword">project</span>(DTKWallpaperManager VERSION <span class="number">1.0</span>.<span class="number">0</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定c++的标准要求，这里选择c++11以上</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置支持Qt moc文件</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># 设置支持Qt 资源文件</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找Qt核心库 widget gui</span></span><br><span class="line"><span class="keyword">find_package</span>(Qt5 COMPONENTS Widgets REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Qt5 COMPONENTS Gui  REQUIRED)</span><br><span class="line"><span class="comment"># 寻找Dtk核心库 widget core gui</span></span><br><span class="line"><span class="keyword">find_package</span>(Dtk COMPONENTS Widget REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Dtk COMPONENTS Core REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Dtk COMPONENTS Gui)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找 src 文件夹下的所有源文件并保存在 SRC 中</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC src/*.cpp)</span><br><span class="line"><span class="comment"># 寻找 include文件夹下的所有头文件并保存在 HEAD 中</span></span><br><span class="line"><span class="keyword">file</span>(GLOB HEAD <span class="keyword">include</span>/*.h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含 include 文件夹下的头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件目标，源文件，头文件和资源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">        <span class="variable">$&#123;SRC&#125;</span> <span class="variable">$&#123;HEAD&#125;</span></span><br><span class="line">        resources.qrc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目需要的模块及其库文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(DTKWallpaperManager PRIVATE</span><br><span class="line">    Qt5::Widgets</span><br><span class="line">    Qt5::Gui</span><br><span class="line">    Qt5::Network</span><br><span class="line">    <span class="variable">$&#123;DtkGui_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;DtkCore_LIBRARIES&#125;</span></span><br><span class="line">    <span class="variable">$&#123;DtkWidget_LIBRARIES&#125;</span></span><br><span class="line">) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、界面设计"><a href="#三、界面设计" class="headerlink" title="三、界面设计"></a>三、界面设计</h3><h4 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h4><p>本项目目前主要功能有本地图片，在线图片，查看大图，保存壁纸，设置壁纸等<br>因为控件不算多，这里将所有的空间都放在主界面(MainWindow)中，具体细节如下：</p><ol><li>MainWindow的中心控件是一个DStackedWidget<ol><li>界面1：包含左侧选择本地壁纸和在线壁纸的功能列表以及右侧的图片浏览界面</li><li>界面2：包含一个DImageViewer控件，用于显示图片</li></ol></li><li>最外层DStackedWidget左侧功能界面使用DListView</li><li>最外层DStackedWidget右侧图片浏览界面使用一个DStackedWidget的两个界面来分别显示本地图片和在线图片</li><li>将设置壁纸和再来一组功能合并为一个按钮放在titlebar的右侧，titlebar右侧还有保存壁纸和一个加载动画的控件(DSpinner)</li><li>titlebar左侧是一个返回按钮，在特定的场景才会出现</li></ol><h4 id="设计图展示"><a href="#设计图展示" class="headerlink" title="设计图展示"></a>设计图展示</h4><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/mainWidget.png" alt="主界面"></p><h4 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h4><p>该部分代码截取自<code>src/mainWindow.cpp</code>和<code>include/mainWindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码截取自mainWindow.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QThreadPool *pool;                  <span class="comment">//全局线程池</span></span><br><span class="line">    DListView *funcModLV;               <span class="comment">//在线壁纸和本地壁纸的功能模块</span></span><br><span class="line">    DStackedWidget *mainStacked;        <span class="comment">//最外层stack，一个显示主界面，一个显示图片详情</span></span><br><span class="line">    DStackedWidget *imgStacked;         <span class="comment">//图片流界面deepin</span></span><br><span class="line">    DWidget *mainWidget;                <span class="comment">//主界面</span></span><br><span class="line">    DImageViewer *imgViewer;            <span class="comment">//图片显示</span></span><br><span class="line">    QStandardItemModel *model;          <span class="comment">//左侧功能区model</span></span><br><span class="line">    DFlowLayout *imgFlowOnline;         <span class="comment">//在线壁纸flow</span></span><br><span class="line">    DFlowLayout *imgFlowLocal;          <span class="comment">//本地壁纸flow</span></span><br><span class="line">    DWidget *imgWidgetOnline;           <span class="comment">//在线壁纸窗口</span></span><br><span class="line">    DWidget *imgWidgetLocal;            <span class="comment">//本地壁纸窗口</span></span><br><span class="line">    DScrollArea *scrollareaLocal;       <span class="comment">//本地壁纸滚动区域</span></span><br><span class="line">    DScrollArea *scrollareaOnline;      <span class="comment">//在线壁纸滚动区域</span></span><br><span class="line">    DWidget *imgfixWidgetLocal;         <span class="comment">//本地壁纸外层窗口，在scrollArea内一层，用于居中其内部的Widget(该widget为流布局)，实现流布局的居中</span></span><br><span class="line">    DWidget *imgfixWidgetOnline;        <span class="comment">//在线壁纸外层窗口，...</span></span><br><span class="line">    QNetworkAccessManager  *networkAccessManager;   <span class="comment">//网络连接管理</span></span><br><span class="line">    QVector&lt;DIconButton*&gt; imgsLocal;    <span class="comment">//本地图片</span></span><br><span class="line">    QVector&lt;DIconButton*&gt; imgsOnline;   <span class="comment">//在线图片</span></span><br><span class="line">    QHash&lt;<span class="type">int</span>, QImage*&gt; imgsLocalMap;   <span class="comment">//从硬盘读取的本地图片</span></span><br><span class="line">    QHash&lt;<span class="type">int</span>, QImage*&gt; imgsOnlineMap;  <span class="comment">//从硬盘中读取的在线图片</span></span><br><span class="line">    DPushButton *returnBtn;             <span class="comment">//返回按键</span></span><br><span class="line">    DPushButton *funcBtn;               <span class="comment">//功能按键（刷新页面，设置壁纸）</span></span><br><span class="line">    DPushButton *saveBtn;               <span class="comment">//保存壁纸按钮</span></span><br><span class="line">    DSpinner *spinner;                  <span class="comment">//加载spinner</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码截取自mainWindow.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::initUI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置titleBar部分</span></span><br><span class="line">    returnBtn = <span class="keyword">new</span> <span class="built_in">DPushButton</span>();</span><br><span class="line">    funcBtn = <span class="keyword">new</span> <span class="built_in">DPushButton</span>(<span class="string">&quot;再来一组&quot;</span>);</span><br><span class="line">    spinner = <span class="keyword">new</span> <span class="built_in">DSpinner</span>();</span><br><span class="line">    saveBtn = <span class="keyword">new</span> <span class="built_in">DPushButton</span>(<span class="string">&quot;保存壁纸&quot;</span>);</span><br><span class="line">    <span class="comment">//设置加入titlebar各个组件的默认大小</span></span><br><span class="line">    returnBtn-&gt;<span class="built_in">setFixedWidth</span>(<span class="number">40</span>);</span><br><span class="line">    saveBtn-&gt;<span class="built_in">setFixedWidth</span>(<span class="number">80</span>);</span><br><span class="line">    funcBtn-&gt;<span class="built_in">setFixedWidth</span>(<span class="number">80</span>);</span><br><span class="line">    spinner-&gt;<span class="built_in">setFixedSize</span>(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    returnBtn-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/images/left-arrow.png&quot;</span>));</span><br><span class="line">    returnBtn-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(<span class="number">20</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将设置的组件默认隐藏</span></span><br><span class="line">    returnBtn-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    funcBtn-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    spinner-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    saveBtn-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    <span class="comment">//添加组件到titlebar并设置对齐方式</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">titlebar</span>()-&gt;<span class="built_in">addWidget</span>(returnBtn, Qt::AlignLeft);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">titlebar</span>()-&gt;<span class="built_in">addWidget</span>(spinner, Qt::AlignRight);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">titlebar</span>()-&gt;<span class="built_in">addWidget</span>(saveBtn, Qt::AlignRight);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">titlebar</span>()-&gt;<span class="built_in">addWidget</span>(funcBtn, Qt::AlignRight);</span><br><span class="line">    <span class="comment">//最外层stackedWidget</span></span><br><span class="line">    mainStacked = <span class="keyword">new</span> <span class="built_in">DStackedWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//主界面窗口</span></span><br><span class="line">    mainWidget = <span class="keyword">new</span> <span class="built_in">DWidget</span>();</span><br><span class="line">    <span class="comment">//设置主界面的layout</span></span><br><span class="line">    QHBoxLayout *mainLayout = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>(mainWidget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左侧功能模块按钮区</span></span><br><span class="line">    funcModLV  = <span class="keyword">new</span> <span class="built_in">DListView</span>();</span><br><span class="line">    model = <span class="keyword">new</span> <span class="built_in">QStandardItemModel</span>();</span><br><span class="line">    <span class="comment">//向功能区添加两个项目</span></span><br><span class="line">    model-&gt;<span class="built_in">appendRow</span>(<span class="keyword">new</span> <span class="built_in">DStandardItem</span>(<span class="string">&quot;本地壁纸&quot;</span>));</span><br><span class="line">    model-&gt;<span class="built_in">appendRow</span>(<span class="keyword">new</span> <span class="built_in">DStandardItem</span>(<span class="string">&quot;在线壁纸&quot;</span>));</span><br><span class="line">    funcModLV-&gt;<span class="built_in">setModel</span>(model);</span><br><span class="line">    <span class="comment">//设置固定大小</span></span><br><span class="line">    funcModLV-&gt;<span class="built_in">setFixedWidth</span>(<span class="number">150</span>);</span><br><span class="line">    <span class="comment">//设置DListView不可编辑</span></span><br><span class="line">    funcModLV-&gt;<span class="built_in">setEditTriggers</span>(DListView::EditTrigger::NoEditTriggers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右侧图片流显示区域</span></span><br><span class="line">    <span class="comment">//新建滚动区域</span></span><br><span class="line">    scrollareaLocal = <span class="keyword">new</span> <span class="built_in">DScrollArea</span>();</span><br><span class="line">    scrollareaOnline = <span class="keyword">new</span> <span class="built_in">DScrollArea</span>();</span><br><span class="line"></span><br><span class="line">    imgStacked  = <span class="keyword">new</span> <span class="built_in">DStackedWidget</span>();</span><br><span class="line">    imgWidgetLocal = <span class="keyword">new</span> <span class="built_in">DWidget</span>();</span><br><span class="line">    imgWidgetOnline = <span class="keyword">new</span> <span class="built_in">DWidget</span>();</span><br><span class="line"></span><br><span class="line">    imgFlowLocal = <span class="keyword">new</span> <span class="built_in">DFlowLayout</span>(imgWidgetLocal);</span><br><span class="line">    imgFlowOnline = <span class="keyword">new</span> <span class="built_in">DFlowLayout</span>(imgWidgetOnline);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置流式布局属性</span></span><br><span class="line">    imgFlowLocal-&gt;<span class="built_in">setSpacing</span>(<span class="number">20</span>);</span><br><span class="line">    imgFlowOnline-&gt;<span class="built_in">setSpacing</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将本地和在线的图片窗口设置为流式布局</span></span><br><span class="line">    imgWidgetLocal-&gt;<span class="built_in">setLayout</span>(imgFlowLocal);</span><br><span class="line">    imgWidgetOnline-&gt;<span class="built_in">setLayout</span>(imgFlowOnline);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建一个窗体，内部存放流布局的另外一个widget，可实现流布局窗口的居中</span></span><br><span class="line">    QVBoxLayout *localVLayout = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">    <span class="comment">//设置居中</span></span><br><span class="line">    localVLayout-&gt;<span class="built_in">setAlignment</span>(Qt::AlignHCenter);</span><br><span class="line">    imgfixWidgetLocal = <span class="keyword">new</span> <span class="built_in">DWidget</span>();</span><br><span class="line">    localVLayout-&gt;<span class="built_in">addWidget</span>(imgWidgetLocal);</span><br><span class="line">    imgfixWidgetLocal-&gt;<span class="built_in">setLayout</span>(localVLayout);</span><br><span class="line"></span><br><span class="line">    QVBoxLayout *onlineVLayout = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">    onlineVLayout-&gt;<span class="built_in">setAlignment</span>(Qt::AlignHCenter);</span><br><span class="line">    imgfixWidgetOnline = <span class="keyword">new</span> <span class="built_in">DWidget</span>();</span><br><span class="line">    onlineVLayout-&gt;<span class="built_in">addWidget</span>(imgWidgetOnline);</span><br><span class="line">    imgfixWidgetOnline-&gt;<span class="built_in">setLayout</span>(onlineVLayout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将两个流式布局的外层窗口添加到滚动区域中</span></span><br><span class="line">    scrollareaLocal-&gt;<span class="built_in">setWidget</span>(imgfixWidgetLocal);</span><br><span class="line">    scrollareaOnline-&gt;<span class="built_in">setWidget</span>(imgfixWidgetOnline);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将两个滚动区域添加到imgStacked中</span></span><br><span class="line">    imgStacked-&gt;<span class="built_in">addWidget</span>(scrollareaLocal);</span><br><span class="line">    imgStacked-&gt;<span class="built_in">addWidget</span>(scrollareaOnline);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将左侧功能区和右侧图片流区域添加在mainLayout</span></span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(funcModLV);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(imgStacked);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将主界面和显示图片大图的界面添加到最外层StackedWidget</span></span><br><span class="line">    mainStacked-&gt;<span class="built_in">addWidget</span>(mainWidget);</span><br><span class="line">    imgViewer = <span class="keyword">new</span> <span class="built_in">DImageViewer</span>();</span><br><span class="line">    mainStacked-&gt;<span class="built_in">addWidget</span>(imgViewer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置中心界面</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setCentralWidget</span>(mainStacked);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片信息流主要利用了DFLowLayout布局，他是Dtk中的一种流布局，可以很方便的展示不确定数目的控件，搭配上DScrollAare即可实现信息流浏览，相关功能文档已经放在下方</p><blockquote><p>DFlowLayout 文档链接: <a href="https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DFlowLayout.html">https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DFlowLayout.html</a></p></blockquote><h3 id="四、功能设计"><a href="#四、功能设计" class="headerlink" title="四、功能设计"></a>四、功能设计</h3><p>主要分为5个小功能模块，分别是：</p><ol><li>多线程读取本地图片</li><li>多线程获取网络图片url</li><li>下载图片</li><li>查看大图</li><li>保存壁纸</li><li>设置壁纸</li></ol><h4 id="读取本地图片"><a href="#读取本地图片" class="headerlink" title="读取本地图片"></a>读取本地图片</h4><p>读取本地图片是一种比较慢的IO操作，当图片的数量比较大的时候，程序启动会十分缓慢，并会卡住一段时间，通过把读取图片的操作放在子线程中执行不仅可以提升加载速度，还能避免界面阻塞。</p><p>实现本部分的功能思路如下：</p><ol><li>建立一个继承自QRunnable的类，重写<code>run()</code>方法，用于读取一张本地壁纸文件</li><li>MainWindow检测系统壁纸文件夹下的文件数量，设置同样数量DIconButton在前端占位置，将路径发送给读取文件类(FileRead)的对象，然后丢给Qt的线程池，执行读取</li><li>子线程读取成功发出读取成功信号，将图片保存QImage对象中，信号发送一个QImage指针，保存在MainWindow中</li><li>MainWindow将读取到的图片加载到前端对应DIconButton中</li></ol><p>这就是读取本地图片的思路，相关代码可在fileRead.cpp和mainWindow.cpp中找到</p><blockquote><p>DIconButton 文档链接: <a href="https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DIconButton.html">https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DIconButton.html</a></p></blockquote><h4 id="读取在线图片"><a href="#读取在线图片" class="headerlink" title="读取在线图片"></a>读取在线图片</h4><p>程序代码使用的是 unsplash 平台的api，需要自行注册开发者获取<code>Access Key</code>才能使用在线壁纸功能,可在<code>void MainWindow::readOnlineWallPaper()</code>函数中自行修改</p><blockquote><p>unsplash 官网: <a href="https://unsplash.dogedoge.com/">https://unsplash.dogedoge.com/</a></p><p>unsplash api 文档:<a href="https://unsplash.dogedoge.com/documentation">https://unsplash.dogedoge.com/documentation</a></p></blockquote><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/key.png" alt="Access Key"></p><p>注意：该平台的 api 的Demo等级每小时只能发送50次请求(每次最多获取30个图片url)，若有更高需求，需要到官网提升等级</p><p>该部分的读取方式与本地有较大区别，需要发送请求获取图片url地址，然后通过url地址下载图片，详细思路如下：</p><ol><li>获取图片url，QNetworkAccessManager对象发送get请求，获取到包含图片url的json格式数据</li><li>解析json数据，提取url</li><li>根据url的数量在前端设置相同数量的QIconButton占位，后续加载成功后再陆续设置button的icon</li><li>更换url的域名，因为 unsplash 使用了 Imgix 提供图片处理服务，我们将域名转换到Imgix中，不仅可以改变图片宽高等样式，经过测试，相比原url，Imgix的url读取速度更快</li><li>将经过处理的url发给DownloadImage类的构造函数创建一个对象，这个类继承自QRunnable，设置好url等信息后，丢入线程池，进行图片下载操作</li><li>下载完成后发送相关信号，通知mainWindow读取下载完成的图片(通过QImage保存)</li><li>将下载完成的图片显示到前端</li></ol><p>api返回的json数据如下(截取部分)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hv9CS6KZayQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-08-31T14:36:55Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-02T18:29:48Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;promoted_at&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">8256</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">5504</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#c0c0c0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blur_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LFJ89A_N9K?cbVxbx^t6DQ-pWRt7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alt_description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;raw&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/photo-1661956602944-249bcd04b63f?ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA\u0026ixlib=rb-4.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;full&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/photo-1661956602944-249bcd04b63f?crop=entropy\u0026cs=tinysrgb\u0026fm=jpg\u0026ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA\u0026ixlib=rb-4.0.3\u0026q=80&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;regular&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/photo-1661956602944-249bcd04b63f?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=1080&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;small&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/photo-1661956602944-249bcd04b63f?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=400&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;thumb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/photo-1661956602944-249bcd04b63f?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=200&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;small_s3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://s3.us-west-2.amazonaws.com/images.unsplash.com/small/photo-1661956602944-249bcd04b63f&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/photos/Hv9CS6KZayQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://unsplash.com/photos/Hv9CS6KZayQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;download&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://unsplash.com/photos/Hv9CS6KZayQ/download?ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;download_location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/photos/Hv9CS6KZayQ/download?ixid=MnwzOTA1Mzd8MXwxfGFsbHwxfHx8fHx8Mnx8MTY3NTQyMzU4NA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="number">252</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;liked_by_user&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;current_user_collections&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sponsorship&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;impression_urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;https://ad.doubleclick.net/ddm/trackimp/N1224323.3286893UNSPLASH/B29258209.358599301;dc_trk_aid=549473985;dc_trk_cid=185855956;ord=[timestamp];dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;tfua=;ltd=?&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;https://pixel.adsafeprotected.com/rfw/st/1337634/69218574/skeleton.gif?gdpr=$&#123;GDPR&#125;\u0026gdpr_consent=$&#123;GDPR_CONSENT_278&#125;\u0026gdpr_pd=$&#123;GDPR_PD&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;https://track.activemetering.com/pixel/v1/all/pixel.gif?cid=b7348795-483d-4f08-879b-cb4f93b6f5dc\u0026creativeId=185855956\u0026placementId=358599301&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reach the right shoppers and increase orders&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tagline_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ad.doubleclick.net/ddm/trackclk/N1224323.3286893UNSPLASH/B29258209.358599301;dc_trk_aid=549473985;dc_trk_cid=185855956;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;tfua=;ltd=&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sponsor&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D-bxv1Imc-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-03T09:48:45Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;twitter_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;portfolio_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mailchimp.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;bio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The all-in-one Marketing Platform built for growing businesses.&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://unsplash.com/de/@mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;photos&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp/photos&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp/likes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;portfolio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp/portfolio&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;following&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp/following&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;followers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.unsplash.com/users/mailchimp/followers&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profile_image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;small&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/profile-1609545740442-928866556c38image?ixlib=rb-4.0.3\u0026crop=faces\u0026fit=crop\u0026w=32\u0026h=32&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;medium&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/profile-1609545740442-928866556c38image?ixlib=rb-4.0.3\u0026crop=faces\u0026fit=crop\u0026w=64\u0026h=64&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;large&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://images.unsplash.com/profile-1609545740442-928866556c38image?ixlib=rb-4.0.3\u0026crop=faces\u0026fit=crop\u0026w=128\u0026h=128&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;instagram_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;total_collections&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;total_likes&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;total_photos&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;accepted_tos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;for_hire&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;social&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;instagram_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;portfolio_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mailchimp.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;twitter_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mailchimp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;paypal_email&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>注意：这里第个步骤显示到前端的时候，需要设置一个1ms的事件循环来等待ui成功加载，再通过<code>DFlowLayout::heightForWidth()</code>设置正确高度，否则这里获取到的高度会不正确，导致界面显示异常</p><p>相关代码可以在downloadImage.cpp和mainwindow.cpp中找到</p><h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><p>这个模块在downloadImage中，获取到mainWindow发送来的url后，QNetworkAccessManager发出图片url的 get请求，下载图片在QNetworkReply对象中，这里设置一个局部事件循环，事件循环用于等待下载图片的完成，若下载完成则结束事件循环，若下载超时，则事件循环退出，发送下载失败的信号</p><h4 id="查看大图"><a href="#查看大图" class="headerlink" title="查看大图"></a>查看大图</h4><p>这个功能主要使用到了Dtk的DImageViewr控件，控件提供了基本的图像查看能力</p><blockquote><p>DImageViewer 文档链接: <a href="https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DImageViewer.html">https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DImageViewer.html</a></p></blockquote><p>使用方法非常简单，通过<code>setImage()</code>函数将我们的QImage指针传递进去即可，除此之外，还可以使用 <code>autoFitImage()</code>来让图片显示到合适的比例，其他的功能还请阅读相关文档</p><h4 id="保存壁纸"><a href="#保存壁纸" class="headerlink" title="保存壁纸"></a>保存壁纸</h4><p>这个功能使用了Dtk的DFileDialog对话框控件，这里只是使用了最基础的功能，Dtk还提供在文件选择对话框上添加下拉框，文本输入框的功能，详见文档：</p><blockquote><p>DFileDialog 文档链接: <a href="https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DFileDialog.html">https://docs.deepin.org/linuxdeepin/master/dtkwidget/classDtk_1_1Widget_1_1DFileDialog.html</a></p></blockquote><p>程序中使用QImage保存来自网络或者本地的图片信息，利用QImage的<code>save()</code>函数输出图片到文件，默认jpg格式</p><h4 id="设置壁纸"><a href="#设置壁纸" class="headerlink" title="设置壁纸"></a>设置壁纸</h4><p>在mainWindow中使用QImage来保存图片信息，设置壁纸的时候需要先将壁纸临时保存在本地再进行设置，这里使用xrandr命令获取屏幕信息，dbus指令来设置壁纸，通过QProcess对象来调用这个指令完成设置，设置成功后mainWindow会发送设置成功的消息，并且删除临时文件</p><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbus-send --dest=com.deepin.daemon.Appearance /com/deepin/daemon/Appearance --print-reply com.deepin.daemon.Appearance.SetMonitorBackground string:显示器名称 string:<span class="string">&#x27;图片路径&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="析构图片内存"><a href="#析构图片内存" class="headerlink" title="析构图片内存"></a>析构图片内存</h4><p>程序中主要使用申请在堆的内存来存储QImage形式的图片，如果在第二次获取在线壁纸的时候不及时析构的话会造成很严重的内存泄露问题，本程序中在imgsLocalMap和imgsOnlineMap中保存了QImage的的指针，只需要析构这里的就可以，另外因为设置在前端的QIconButton也是动态分配内存的，刷新页面的时候需要移除这些DIconButton并且释放掉这些内存，这部分逻辑在mainWindow的<code>removeAllImgs()</code>中实现</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里，整个程序基本结构已经分析完成，在程序源代码中每一个部分都有详细的代码注释，欢迎大家交流学习</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++之STL容器</title>
      <link href="/2022/10/20/C++%E4%B9%8BSTL%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/10/20/C++%E4%B9%8BSTL%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>面向对象的三大特征：封装，继承和多态</p><ul><li>STL提高了泛用性，复用性</li><li>STL从广义上分为三大块：容器，算法和迭代器，容器和算法通过迭代器无缝连接</li><li>STL几乎所有的代码都采用了模板类和模板函数</li></ul><h2 id="1-STL的六大组件"><a href="#1-STL的六大组件" class="headerlink" title="1 STL的六大组件"></a>1 STL的六大组件</h2><ul><li>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</li></ul><ol><li>容器：各种数据结构：vector，list，deque，set，map</li><li>算法：各种常用的算法，sort，find（查找），copy（拷贝），for_each（遍历）</li><li>迭代器：链接容器和算法</li><li>仿函数（重载小括号）：行为类似函数，可作为算法的某种策略</li><li>适配器：一种修饰容器或者仿函数或迭代器接口的东西</li><li>空间配置器：负责空间的配置和管理</li></ol><h2 id="2-容器，算法，迭代器"><a href="#2-容器，算法，迭代器" class="headerlink" title="2 容器，算法，迭代器"></a>2 容器，算法，迭代器</h2><p>容器分为序列式容器和关联式容器</p><ul><li>序列式容器：强调值的排序，容器内每个元素都有固定的位置（怎么放：位置就固定）</li><li>关联式容器：二叉树结构，各个元素之间没有严格物理上的顺序关系</li></ul><p>算法氛围质变算法和非质变算法</p><ul><li>质变算法：运算过程中会更改区间内元素的内容，拷贝，替换，删除</li><li>非质变函数：算法过程中不会更改区间内的元素，查找，计数，遍历，寻找极值</li></ul><p>迭代器</p><ul><li>提供一种方法，使之能依序寻访容器所含的各个目录，相当于指针</li></ul><p>迭代器种类</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>种类</td><td>功能</td><td>支持运算</td></tr><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>++，&#x3D;&#x3D;，! &#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>++</td></tr><tr><td>前向迭代器</td><td>读写操作，能向前推进的迭代器</td><td>++,&#x3D;&#x3D;,! &#x3D;</td></tr><tr><td>双向迭代器</td><td>读写操作，能向前向后操作</td><td>++,- -</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以跳跃式访问任意数据，功能最强的迭代器</td><td>++,- -,[n],-n,&lt;,&lt; &#x3D;,&gt;,&gt; &#x3D;</td></tr></tbody></table><p>常见的容器迭代器为双向迭代器和随机访问迭代器</p><h2 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><ul><li>算法：<code>for_each</code></li><li>迭代器：<code>vector&lt;int&gt;::iterator</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();<span class="comment">//起始迭代器，指向容器中的第一个元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();<span class="comment">//结束迭代器，指向最后一个元素的下一个位置</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">45</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">65</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();<span class="comment">//起始迭代器，指向容器中的第一个元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();<span class="comment">//结束迭代器，指向最后一个元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种遍历方法</span></span><br><span class="line">    <span class="keyword">while</span>(itBegin != itEnd) &#123;</span><br><span class="line">        cout  &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种遍历方法</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp; it : v) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种遍历方法</span></span><br><span class="line"></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vector也可以存放自定义数据类型</p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong>,在数组的尾部可以进行插入和删除的操作</li><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong>,不是简单的扩展内存，而是新开辟一个更大的新空间，拷贝原来的数据，释放原来的空间，至于开辟多少空间，跟编译器有关</li></ul><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002.jpg" alt="img"></p><blockquote><p>vector支持随机访问迭代器</p></blockquote><h4 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h4><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v;</code>                    &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());</code>       &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身，前闭后开。</li><li><code>vector(n, elem);</code>                            &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><h4 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h4><p><strong>函数原型：</strong></p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code>&#x2F;&#x2F;重载等号操作符</li><li><code>assign(beg, end);</code>       &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。两个迭代器之间的拷贝赋值</li><li><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li></ul><h4 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h4><p><strong>函数原型：</strong></p><ul><li><p><code>empty();</code>                            &#x2F;&#x2F;判断容器是否为空，返回true或者false</p></li><li><p><code>capacity();</code>                      &#x2F;&#x2F;容器的容量，容量总是大于等于个数</p></li><li><p><code>size();</code>                              &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>resize(int num);</code>             &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p><strong>修改的元素的个数，而不是vector的容量</strong>，指定的元素个数如果超出容量将会重新分配容量，如果指定的个数小于原来本身的个数，原来多的那部分数据会被删除，元素个数变为指定的个数，但是容器的容量不会变</p></li></ul><h4 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h4><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code>                                         &#x2F;&#x2F;尾部插入元素ele</li><li><code>pop_back();</code>                                                &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code>        &#x2F;&#x2F;迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code>                     &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>&#x2F;&#x2F;删除迭代器从start到end之间的元素</li><li><code>clear();</code> &#x2F;&#x2F;删除容器中所有元素</li></ul><h4 id="vector数据存取"><a href="#vector数据存取" class="headerlink" title="vector数据存取"></a>vector数据存取</h4><p><strong>函数原型：</strong></p><ul><li><code>at(int idx);</code>     &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[];</code>       &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front();</code>            &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中<strong>最后一个</strong>数据元素</li></ul><h4 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h4><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code> &#x2F;&#x2F; 将vec与本身的元素互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.<span class="built_in">swap</span>(v2); <span class="comment">//互换容器</span></span><br></pre></td></tr></table></figure><p>巧用swap收缩内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  v.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//收缩内存</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v); <span class="comment">//匿名对象</span></span><br><span class="line">  <span class="comment">//1.v拷贝到匿名对象（当前行执行完后，自动释放内存）</span></span><br><span class="line">  <span class="comment">//2.匿名对象换到原对象</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h4><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问，分配内存了，但是没有初始化。</li></ul><p>向vector中push_back一万个数据会开辟很多次内存，如果使用reserve(<strong>不是reverse</strong>)首先就指定10000个空间，就只需要分配一次了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预留空间</span></span><br><span class="line">    v.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (p != &amp;v[<span class="number">0</span>]) &#123;</span><br><span class="line">            p = &amp;v[<span class="number">0</span>];</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>构造函数原型：<code>string(int n,char c)</code>,n个字符串进行构造</p><p>补充char *类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *cc= <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> dd[]=<span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">cout &lt;&lt; cc &lt;&lt; dd &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="赋值函数（重点）："><a href="#赋值函数（重点）：" class="headerlink" title="赋值函数（重点）："></a>赋值函数（重点）：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">assign</span>(<span class="string">&quot;Hello C++&quot;</span>,<span class="number">5</span>);<span class="comment">//赋值前五个字符</span></span><br><span class="line">str.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>);<span class="comment">//赋值10个a</span></span><br></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+=也可拼接</span><br><span class="line">str.<span class="built_in">append</span>(<span class="string">&quot;HHH&quot;</span>,<span class="number">1</span>);<span class="comment">//前一个字符</span></span><br><span class="line">str.<span class="built_in">append</span>(str1,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从str1第0个开始截取三个字符 </span></span><br></pre></td></tr></table></figure><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><p>string::npos：表示不存在的位置</p><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const;</code>                     &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const;</code>               &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const;</code>                       &#x2F;&#x2F;查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      &#x2F;&#x2F;查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;</code>                      &#x2F;&#x2F;查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str);</code>       &#x2F;&#x2F;替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s);</code> &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</li></ul><p><strong>查询所有子串在母串中的所有位置</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找s 中flag 出现的所有位置。</span></span><br><span class="line">  <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line">    string flag=<span class="string">&quot;l&quot;</span>;</span><br><span class="line">    <span class="type">int</span> position=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((position=s.<span class="built_in">find</span>(flag,position))!=string::npos)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;position  &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; : &quot;</span>&lt;&lt;position&lt;&lt;endl;</span><br><span class="line">        position++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>find()函数和replace()函数要注意:</strong> 计算中文字符所在位置有些特殊，中文有的占四位 string str &#x3D; “asas我爱你”;<br> cout &lt;&lt; str.find(“爱”) &lt;&lt; endl; 输出：7</p><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>&#x3D; 返回 0</p><blockquote><p>返回 1</p></blockquote><p>&lt; 返回 -1,或者两串前半部分相等，后者更长一些</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const;</code>  &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s) const;</code> &#x2F;&#x2F;与字符串s比较</li></ul><p>汉子比较大小没有意义，只能比较是否相等</p><h4 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h4><p>string中单个字符存取(<strong>读写都可以</strong>)方式有两种</p><ul><li><code>char&amp; operator[](int n);</code>     &#x2F;&#x2F;通过[]方式取字符</li><li><code>char&amp; at(int n);</code> &#x2F;&#x2F;通过at方法获取字符</li></ul><h4 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h4><ul><li><code>string&amp; insert(int pos, const char* s);</code>                &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str);</code>        &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code> &#x2F;&#x2F;删除从Pos开始的n个字符</li></ul><h4 id="string截取子串"><a href="#string截取子串" class="headerlink" title="string截取子串"></a>string截取子串</h4><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code> &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul><li>双端数组，可以对头端和尾端进行插入删除操作</li></ul><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002-1547547642923.jpg" alt="img"></p><p><strong>deque与vector区别：</strong></p><p>访问效率较低，头部尾部插入效率较高（相对vector）</p><ul><li><strong>vector对于头部的插入删除效率低，数据量越大，效率越低</strong></li><li>deque相对而言，对头部的插入删除速度会比vector快</li><li><strong>vector访问元素时的速度会比deque快</strong>,这和两者内部实现有关</li></ul><blockquote><p><strong>迭代器支持随机访问</strong></p></blockquote><p>deque内部工作原理</p><ul><li>内部有一个中控器，维护每一段缓冲区的内容，缓冲区中存放着真实的数据</li><li>中控器中存放着每个缓冲区的地址，使得使用deque的时候像一片连续的空间</li></ul><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002-1547547896341.jpg" alt="img"></p><h4 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h4><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT; &#x2F;&#x2F;默认构造形式</li><li><code>deque(beg, end);</code>                  &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code>                    &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p>声明const参数的时候，迭代器也要设置为只读迭代器，否则会报错</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明const参数的时候，迭代器也要设置为只读迭代器，否则会报错</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp;d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;dl;</span><br><span class="line">    dl.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    dl.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    dl.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;it:dl) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h4><p><strong>函数原型：</strong></p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code>         &#x2F;&#x2F;重载等号操作符</li><li><code>assign(beg, end);</code>                                           &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li></ul><h4 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h4><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code>                       &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>deque.size();</code>                         &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code>                &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code>     &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><h4 id="deque-插入和删除"><a href="#deque-插入和删除" class="headerlink" title="deque 插入和删除"></a>deque 插入和删除</h4><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code>          &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code>        &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code>                   &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code>                 &#x2F;&#x2F;删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><code>insert(pos,elem);</code>         &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</li><li><code>insert(pos,n,elem);</code>     &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li><code>insert(pos,beg,end);</code>    &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</li><li><code>clear();</code>                           &#x2F;&#x2F;清空容器的所有数据</li><li><code>erase(beg,end);</code>             &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li></ul><h4 id="deque-数据存取"><a href="#deque-数据存取" class="headerlink" title="deque 数据存取"></a>deque 数据存取</h4><p><strong>函数原型：</strong></p><ul><li><code>at(int idx);</code>     &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[];</code>      &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front();</code>            &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><h4 id="deque-排序"><a href="#deque-排序" class="headerlink" title="deque 排序"></a>deque 排序</h4><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> &#x2F;&#x2F;对beg和end区间内元素进行排序</li></ul><p>对于支持随机访问迭代器的容器，都可以通过sort进行排序</p><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><ul><li>先进后出的数据结构</li><li>不允许有遍历的行为</li></ul><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002-1547604555425.jpg" alt="img"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为 — <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为 — <strong>出栈</strong> <code>pop</code></p><h4 id="stack-常用接口"><a href="#stack-常用接口" class="headerlink" title="stack 常用接口"></a>stack 常用接口</h4><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                 &#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code>            &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>           &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>      &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop();</code>                &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top();</code>                &#x2F;&#x2F;返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size();</code> &#x2F;&#x2F;返回栈的大小</li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002-1547606475892.jpg" alt="img"></p><ul><li>队尾入，队头出</li><li>不允许有遍历行为</li><li>只有队头和队尾可以被访问</li></ul><p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong> <code>pop</code></p><h4 id="queue-常用接口"><a href="#queue-常用接口" class="headerlink" title="queue 常用接口"></a>queue 常用接口</h4><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                 &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code>            &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>           &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>                             &#x2F;&#x2F;往队尾添加元素</li><li><code>pop();</code>                                      &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back();</code>                                    &#x2F;&#x2F;返回最后一个元素</li><li><code>front();</code>                                  &#x2F;&#x2F;返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size();</code> &#x2F;&#x2F;返回栈的大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">60</span>);</span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;<span class="comment">//20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul><li>物理存储单元是不连续的</li><li>STL中的链表是一个双向循环链表</li><li>可以对任意的位置进行快速的插入和删除，但是对于容器的遍历速度没有数组快，占用的空间也比数组大</li></ul><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/clip_image002-1547608564071.jpg" alt="img"></p><blockquote><p>迭代器只支持前移和后移，属于双向迭代器</p></blockquote><p>优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的，因为对于vector插入一个数据，就会可能新开辟一个空间，原有尾端迭代器就没有用了</p><p>STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h4><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code>                               &#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code>                           &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code>                             &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code> &#x2F;&#x2F;拷贝构造函数。</li></ul><h4 id="list-赋值和交换"><a href="#list-赋值和交换" class="headerlink" title="list 赋值和交换"></a>list 赋值和交换</h4><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code>            &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code>              &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code>         &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lst);</code> &#x2F;&#x2F;将lst与本身的元素互换。</li></ul><h4 id="list-大小操作"><a href="#list-大小操作" class="headerlink" title="list 大小操作"></a>list 大小操作</h4><p><strong>函数原型：</strong></p><ul><li><p><code>size();</code>                             &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>empty();</code>                           &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>resize(num);</code>                   &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p></li></ul><h4 id="list-插入和删除"><a href="#list-插入和删除" class="headerlink" title="list 插入和删除"></a>list 插入和删除</h4><p><strong>函数原型：</strong></p><ul><li><code>push_back(elem);</code>&#x2F;&#x2F;在容器尾部加入一个元素</li><li><code>pop_back();</code>&#x2F;&#x2F;删除容器中最后一个元素</li><li><code>push_front(elem);</code>&#x2F;&#x2F;在容器开头插入一个元素</li><li><code>pop_front();</code>&#x2F;&#x2F;从容器开头移除第一个元素</li><li><code>insert(pos,elem);</code>&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。</li><li><code>insert(pos,n,elem);</code>&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li><code>insert(pos,beg,end);</code>&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</li><li><code>clear();</code>&#x2F;&#x2F;移除容器的所有数据</li><li><code>erase(beg,end);</code>&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><code>erase(pos);</code>&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li><li><code>remove(elem);</code>&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</li></ul><h4 id="list-数据存取"><a href="#list-数据存取" class="headerlink" title="list 数据存取"></a>list 数据存取</h4><p><strong>函数原型：</strong></p><ul><li><code>front();</code>        &#x2F;&#x2F;返回第一个元素。</li><li><code>back();</code> &#x2F;&#x2F;返回最后一个元素。</li></ul><h4 id="list-反转和排序"><a href="#list-反转和排序" class="headerlink" title="list 反转和排序"></a>list 反转和排序</h4><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code>   &#x2F;&#x2F;反转链表</li><li><code>sort();</code> &#x2F;&#x2F;链表排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">    <span class="type">int</span> m_Height;</span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="type">int</span> age, <span class="type">int</span> height):<span class="built_in">m_Name</span>(std::<span class="built_in">move</span>(name)),<span class="built_in">m_Age</span>(age),<span class="built_in">m_Height</span>(height)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">comparePerson</span><span class="params">(Person &amp;p1, Person &amp;p2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//按照年龄升序</span></span><br><span class="line">    <span class="keyword">if</span>(p1.m_Age == p2.m_Age) &#123;<span class="comment">//年龄相同的时候按升高降序排序</span></span><br><span class="line">        <span class="keyword">return</span> p1.m_Height &gt; p2.m_Height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1.m_Age &lt; p2.m_Age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    list&lt;Person&gt; L;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">35</span> , <span class="number">175</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;曹操&quot;</span>, <span class="number">45</span> , <span class="number">180</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;孙权&quot;</span>, <span class="number">40</span> , <span class="number">170</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">25</span> , <span class="number">190</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">35</span> , <span class="number">160</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">35</span> , <span class="number">200</span>)</span></span>;</span><br><span class="line">    L.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    L.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    L.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    L.<span class="built_in">push_back</span>(p4);</span><br><span class="line">    L.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    L.<span class="built_in">push_back</span>(p6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(list&lt;Person&gt;::iterator it = L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age</span><br><span class="line">             &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后的信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">sort</span>(comparePerson);<span class="comment">//自定义类型，需要指定规则</span></span><br><span class="line">    <span class="keyword">for</span>(list&lt;Person&gt;::iterator it = L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age</span><br><span class="line">             &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set-x2F-multiset"><a href="#set-x2F-multiset" class="headerlink" title="set&#x2F;multiset"></a>set&#x2F;multiset</h3><ul><li>所有的元素在插入的时候就会自动排好序</li><li>set&#x2F;multiset属于关联式容器，底层结构用<strong>二叉树</strong>实现</li></ul><p>两者的区别：</p><ul><li>set不允许容器中有重复的元素,数学中的集合</li><li>multiset允许容器中有重复的元素</li></ul><blockquote><p>只需要包含set头文件<code>#include&lt;set&gt;</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>); <span class="comment">//插入数据的方法只有这个方法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:s) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h4><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code>                        &#x2F;&#x2F;默认构造函数：</li><li><code>set(const set &amp;st);</code>       &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>    &#x2F;&#x2F;重载等号操作符</li></ul><h4 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h4><p><strong>函数原型：</strong></p><ul><li><code>size();</code>          &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code>        &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h4 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h4><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code>                    &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code>              &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code> &#x2F;&#x2F;删除容器中值为elem的元素。</li></ul><h4 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h4><ul><li><code>find(key);</code>                  &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数，对于set，结果为0或者1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:s) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator pos = s.<span class="built_in">find</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span>(pos != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到数据&quot;</span> &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set和multiset区别"><a href="#set和multiset区别" class="headerlink" title="set和multiset区别"></a>set和multiset区别</h4><p>set::insert会返回插入成功与否的bool值</p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><h4 id="改变set容器的排序规则"><a href="#改变set容器的排序规则" class="headerlink" title="改变set容器的排序规则"></a>改变set容器的排序规则</h4><ul><li>set默认是升序排列</li></ul><p><strong>示例一</strong> set存放内置数据类型</p><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><blockquote><p>不需要包含头文件</p></blockquote><h4 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h4><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p>利用仿函数，可以改变排序规则</p><p><strong>示例一</strong> set存放内置数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> <span class="type">const</span></span>&#123;<span class="comment">//返回值是bool类型，重载的是小括号，仿函数</span></span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    set&lt;<span class="type">int</span>,MyCompare&gt; s2;<span class="comment">//在之前就要定义规则，后续的insert才能够生效</span></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">    s2.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    s2.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">    s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">    s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一种默认升序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it :s) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第二种降序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it :s2) &#123;</span><br><span class="line">        cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二</strong> set存放自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comparePerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person &amp;p2)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//按照年龄进行排序  降序</span></span><br><span class="line">    <span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;Person, comparePerson&gt; s;</span><br><span class="line"></span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">27</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">insert</span>(p1);</span><br><span class="line">  s.<span class="built_in">insert</span>(p2);</span><br><span class="line">  s.<span class="built_in">insert</span>(p3);</span><br><span class="line">  s.<span class="built_in">insert</span>(p4);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (set&lt;Person, comparePerson&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li><li>map&#x2F;multimap属于<strong>关联式容器</strong>，底层结构是用二叉树（红黑树）实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复<strong>key</strong>值元素</li><li>multimap允许容器中有重复<strong>key</strong>值元素</li></ul><p>只是区分key，不区分value</p><h4 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h4><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code>                     &#x2F;&#x2F;map默认构造函数:</li><li><code>map(const map &amp;mp);</code>             &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code> &#x2F;&#x2F;重载等号操作符</li></ul><h4 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h4><p>函数原型：</p><ul><li><code>size();</code>          &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code>        &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h4 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h4><ul><li><code>insert(elem);</code>           &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code>                    &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code>              &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code> &#x2F;&#x2F;删除容器中值为key的元素。</li></ul><h4 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h4><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><h4 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h4><blockquote><p>map容器默认排序规则为 按照key值进行 从小到大排序</p></blockquote><ul><li>利用仿函数，可以改变排序规则</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//默认从小到大排序</span></span><br><span class="line">  <span class="comment">//利用仿函数实现从大到小排序</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt; m;</span><br><span class="line"></span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>之cmake</title>
      <link href="/2022/10/20/C++%E4%B9%8Bcmake/"/>
      <url>/2022/10/20/C++%E4%B9%8Bcmake/</url>
      
        <content type="html"><![CDATA[<h1 id="c-之CMake-VSCode"><a href="#c-之CMake-VSCode" class="headerlink" title="c++之CMake-VSCode"></a>c++之CMake-VSCode</h1><p>部分笔记来源：</p><p><a href="https://www.bilibili.com/video/BV1fy4y1b7TC/?spm_id_from=333.337.search-card.all.click&amp;vd_source=38bec47829bb3eb62135db732b74499d">https://www.bilibili.com/video/BV1fy4y1b7TC/?spm_id_from=333.337.search-card.all.click&amp;vd_source=38bec47829bb3eb62135db732b74499d</a></p><ul><li><p><strong>CMake</strong>是一个<strong>跨平台</strong>的安装<strong>编译工具</strong>，可以用<strong>简单</strong>的语句来描述<strong>所有平台</strong>的安装(编译过程)。</p></li><li><p>CMake可以说已经成为<strong>大部分C++开源项目标配</strong></p></li></ul><h2 id="语法特性介绍"><a href="#语法特性介绍" class="headerlink" title="语法特性介绍"></a>语法特性介绍</h2><ul><li><p><strong>基本语法格式：指令(参数 1 参数 2…)</strong></p></li><li><p>参数使用<strong>括弧</strong>括起</p></li><li><p>参数之间使用<strong>空格</strong>或<strong>分号</strong>分开</p></li><li><p><strong>指令是大小写无关的，参数和变量是大小写相关的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(HELLO hello.cpp)</span><br><span class="line">add_executable(hello main.cpp hello.cpp)</span><br><span class="line">ADD_EXECUTABLE(hello main.cpp <span class="variable">$&#123;HELLO&#125;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</strong></p></li></ul><h2 id="重要指令和CMake常用变量"><a href="#重要指令和CMake常用变量" class="headerlink" title="重要指令和CMake常用变量"></a>重要指令和CMake常用变量</h2><ul><li><p><strong>cmake_minimum_required</strong> <strong>- 指定CMake的最小版本要求</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最小版本要求为2.8.32</span></span><br><span class="line">cmake_minimum_required(VERSION 2.8.3)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</strong></p></li><li><p><strong>project</strong> <strong>- 定义工程名称，并可指定工程支持的语言</strong>&amp;#x20;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定工程名为HELLOWORLD</span></span><br><span class="line">project(HELLOWORLD)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>project(projectname [CXX] [C] [Java])</strong></p></li><li><p><strong>set</strong> <strong>- 显式的定义变量</strong>&amp;#x20;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为sayhello.cpp hello.cpp</span></span><br><span class="line"><span class="built_in">set</span>(SRC sayhello.cpp hello.cpp)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</strong></p></li><li><p><strong>include_directories - 向工程添加多个特定的头文件搜索路径</strong>  —&gt;相当于指定g++编译器的-I参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span></span><br><span class="line">include_directories(/usr/include/myincludefolder ./include)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</strong></p></li><li><p><strong>link_directories</strong> <strong>- 向工程添加多个特定的库文件搜索路径</strong>  —&gt;相当于指定g++编译器的-L参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span></span><br><span class="line">link_directories(/usr/lib/mylibfolder ./lib)</span><br></pre></td></tr></table></figure></li><li><p>语法：link_directories(dir1 dir2 …)&amp;#x20;</p></li><li><p><strong>add_library</strong> <strong>- 生成库文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过变量 SRC 生成 libhello.so 共享库</span></span><br><span class="line">add_library(hello SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 … sourceN)</strong></p></li><li><p><strong>add_compile_options</strong> - 添加编译参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加编译参数 -Wall -std=c++11</span></span><br><span class="line">add_compile_options(-Wall -std=c++11 -O2)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>add_compile_options(</strong></p></li><li><p><strong>add_executable</strong> <strong>- 生成可执行文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译main.cpp生成可执行文件main</span></span><br><span class="line">add_executable(main main.cpp)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>add_executable</strong><strong>(exename source1 source2 … sourceN)</strong> ​</p></li><li><p><strong>target_link_libraries</strong> - 为 target 添加需要链接的共享库  —&gt;相同于指定g++编译器-l参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将hello动态库文件链接到可执行文件main</span></span><br><span class="line">target_link_libraries(main hello)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>target_link_libraries(target library1library2…)</strong></p></li><li><p><strong>add_subdirectory - 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加src子目录，src中需有一个CMakeLists.txt</span></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</strong></p></li><li><p><strong>aux_source_directory - 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为当前目录下所有的源代码文件</span></span><br><span class="line">aux_source_directory(. SRC)</span><br><span class="line"><span class="comment"># 编译SRC变量所代表的源代码文件，生成main可执行文件</span></span><br><span class="line">add_executable(main <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure></li><li><p>语法：<strong>aux_source_directory(dir VARIABLE)</strong></p></li></ul><h4 id="CMake常用变量"><a href="#CMake常用变量" class="headerlink" title="CMake常用变量"></a>CMake常用变量</h4><ul><li><p><strong>CMAKE_C_FLAGS   gcc编译选项</strong></p><p><strong>CMAKE_CXX_FLAGS  g++编译选项</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span></span><br><span class="line"><span class="built_in">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;<span class="variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>CMAKE_BUILD_TYPE  编译类型(Debug, Release)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定编译类型为debug，调试时需要选择debug</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE Debug) </span><br><span class="line"><span class="comment"># 设定编译类型为release，发布时需要选择release4set(CMAKE_BUILD_TYPE Release) </span></span><br><span class="line"><span class="comment"># Release-&gt; 加上O3优化以及关闭debug调试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CMAKE_BINARY_DIR</strong></p><p><strong>PROJECT_BINARY_DIR</strong></p><p><strong>&lt;projectname&gt;__BINARY_DIR</strong></p></li></ul><ol><li><p>这三个变量指代的内容是一致的。</p></li><li><p>如果是 in source build，指的就是工程顶层目录。</p></li><li><p>如果是 out-of-source 编译,指的是工程编译发生的目录。</p></li><li><p>PROJECT_BINARY_DIR 跟其他指令稍有区别，不过现在，你可以理解为他们是一致的。</p></li></ol><ul><li><p><strong>CMAKE_SOURCE_DIR</strong></p><p><strong>PROJECT_SOURCE_DIR</strong> &amp;#x20;</p><p><strong>&lt;projectname&gt;__SOURCE_DIR</strong></p></li></ul><ol><li><p>这三个变量指代的内容是一致的,不论采用何种编译方式,都是工程顶层目录。</p></li><li><p>也就是在 in source build时,他跟 CMAKE_BINARY_DIR 等变量一致。</p></li><li><p>PROJECT_SOURCE_DIR 跟其他指令稍有区别,现在,你可以理解为他们是一致的。</p></li></ol><hr><ul><li><p><strong>CMAKE_C_COMPILER：指定C编译器</strong></p></li><li><p><strong>CMAKE_CXX_COMPILER：指定C++编译器</strong></p></li><li><p><strong>EXECUTABLE_OUTPUT_PATH：可执行文件输出的存放路径</strong></p></li><li><p><strong>LIBRARY_OUTPUT_PATH：库文件输出的存放路径</strong></p></li></ul><h2 id="CMake编译工程"><a href="#CMake编译工程" class="headerlink" title="CMake编译工程"></a>CMake编译工程</h2><p>CMake目录结构：项目主目录存在一个CMakeLists.txt文件</p><p><strong>两种方式设置编译规则</strong>：</p><ol><li><p>包含源文件的子文件夹包含CMakeLists.txt文件，主目录的CMakeLists.txt通过add_subdirectory添加子目录即可；</p></li><li><p>包含源文件的子文件夹未包含CMakeLists.txt文件，子目录编译规则体现在主目录的CMakeLists.txt中；</p></li></ol><h4 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h4><ul><li><p>手写CMakelists.txt</p></li><li><p>执行命令<code>cmake PATH</code>生成Makefile(PATH是顶层CMakeLists.txt所在的目录)</p></li><li><p>执行命令<code>make</code>进行编译</p></li></ul><h4 id="6-4-2-两种构建方式"><a href="#6-4-2-两种构建方式" class="headerlink" title="6.4.2 两种构建方式"></a>6.4.2 两种构建方式</h4><ul><li><p>**内部构建(in-source build)**：不推荐使用</p><p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 内部构建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下，编译本目录的CMakeLists.txt，生成Makefile和其他文件</span></span><br><span class="line">cmake .</span><br><span class="line"><span class="comment"># 执行make命令，生成target</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>**外部构建(out-of-source build)**：&#x3D;&#x3D;推荐使用&#x3D;&#x3D;</p><p>将编译输出文件与源文件放到不同目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 外部构建 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 在当前目录下，创建build文件夹 </span></span><br><span class="line"><span class="built_in">mkdir</span> build  </span><br><span class="line"><span class="comment"># 2. 进入到build文件夹 </span></span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line"><span class="comment"># 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件 </span></span><br><span class="line">cmake .. </span><br><span class="line"><span class="comment"># 4. 执行make命令，生成target</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>最外层CMakeLists.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0) <span class="comment"># 最小版本要求</span></span><br><span class="line"></span><br><span class="line">project(HELLOWORLD) <span class="comment"># 项目名称</span></span><br><span class="line"></span><br><span class="line">add_executable(helloWorld_cmake main.cpp) <span class="comment"># 输出的可执行程序文件名，源文件名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入build</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 外部构建</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># 编译链接</span></span><br><span class="line">make</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="举例二（多文件）"><a href="#举例二（多文件）" class="headerlink" title="举例二（多文件）"></a>举例二（多文件）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line"></span><br><span class="line">project(SWAP)</span><br><span class="line"></span><br><span class="line">include_directories(include)</span><br><span class="line"></span><br><span class="line">add_executable(main_cmake main.cpp src/swap.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后步骤跟上面一样</p><blockquote><p>📌修改源文件后，只需要再次make即可，不需要再生产Makefile</p></blockquote><blockquote><p>set(CMAKE_CXX_FLAGS “${CMAKE_CXX_FLAGS} -g  -Wall”)  设置参数编译</p></blockquote><blockquote><p>📌需要调试的时候不要加优化编译，否则会出现错误</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/mycmake_exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;..&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                </span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;make&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++智能指针</title>
      <link href="/2022/10/20/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>/2022/10/20/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>c++有两种指针：原始指针和智能指针 智能指针是原始指针的封装，优点是会自动的分配内存，不用担心潜在的内存泄露</p><h2 id="关于智能指针"><a href="#关于智能指针" class="headerlink" title="关于智能指针"></a>关于智能指针</h2><p>在c++11中通过引用智能指针的概念，使得程序员不需要手动释放内存</p><p>智能指针的种类</p><ul><li>std::unique_ptr</li><li>std::shared_ptr</li><li>std::weak_ptr</li></ul><p>注意</p><ul><li>std::auto_ptr已经被废弃</li></ul><p>智能指针和原始指针</p><ul><li>并不是所有的指针都可以封装为指针指针，有的时候原始指针比智能指针更加方便</li><li>最常用的是裸指针，其次是unique_ptr和shared_ptr</li><li>weak_ptr是shared_ptr的一个补充，应用场景比较少</li><li>智能指针只是解决了一部分问题，没有从根本上解决C++内存安全的问题，不加以使用依然会造成内存安全的问题</li></ul><h2 id="独占指针：unique-ptr"><a href="#独占指针：unique-ptr" class="headerlink" title="独占指针：unique_ptr"></a>独占指针：unique_ptr</h2><ul><li>用得最多的一个</li><li>在任何给定的时刻，只能有一个指针释放内存</li><li>当指针超过作用域后，内存将会自动释放</li><li>该类型指针不能copy只能move</li></ul><h4 id="三种创建方式"><a href="#三种创建方式" class="headerlink" title="三种创建方式"></a>三种创建方式</h4><ul><li>通过已用的裸指针进行创建：建议将裸指针置空消除掉</li><li>通过new创建</li><li>std::make_unique创建(推荐)</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>unique_ptr可以通过get()获取地址</li><li>实现了→和*</li></ul><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>cat.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CAT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cat</span>(std::string name);</span><br><span class="line">    <span class="built_in">Cat</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">Cat</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-&gt;</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cat_info</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;cat info name&quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">get_name</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_cat_name</span><span class="params">(<span class="type">const</span> std::string &amp;name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name&#123;<span class="string">&quot;Mimi&quot;</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>cat.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Cat::<span class="built_in">Cat</span>(std::string name):<span class="built_in">name</span>(name) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;constructor of Cat :&quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat::~<span class="built_in">Cat</span>() &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Destructor of Cat :&quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>裸指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Cat c1(&quot;OK&quot;);</span></span><br><span class="line">    <span class="comment">// c1.cat_info();</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     Cat c1(&quot;OK&quot;);</span></span><br><span class="line">    <span class="comment">//     c1.cat_info();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//row point 裸指针</span></span><br><span class="line">    Cat *c_p1 = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;YY&quot;</span>);</span><br><span class="line">    c_p1-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    &#123;<span class="comment">//加入到局部作用域</span></span><br><span class="line">        Cat *c_p1 = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;YY&quot;</span>);</span><br><span class="line">        c_p1-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">        <span class="keyword">delete</span> c_p1;    <span class="comment">//加入delete语句之前不会被自动析构</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---- yz ----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">constructor of Cat :YY</span><br><span class="line">cat info nameYY</span><br><span class="line">constructor of Cat :YY</span><br><span class="line">cat info nameYY</span><br><span class="line">Destructor of Cat :YY</span><br><span class="line">---- yz ----</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.通过裸指针初始化</span></span><br><span class="line">    <span class="comment">//建议销毁原指针，否则操作原指针的时候也在操作独占指针，这个时候独占指针不在独占，也是不安全的</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    Cat *c_p1 = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;yz&quot;</span>);</span><br><span class="line">    <span class="function">unique_ptr&lt;Cat&gt; <span class="title">u_c_p1</span><span class="params">(c_p1)</span></span>;</span><br><span class="line">    <span class="comment">// delete c_p1;</span></span><br><span class="line">    <span class="comment">// c_p1=nullptr;</span></span><br><span class="line">    c_p1-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    u_c_p1-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    c_p1-&gt;<span class="built_in">set_cat_name</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    u_c_p1-&gt;<span class="built_in">cat_info</span>();<span class="comment">//同样被改变成OK了</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过new来创建unique_ptr</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="function">unique_ptr&lt;Cat&gt; <span class="title">u_c_p2</span> <span class="params">(<span class="keyword">new</span> Cat(<span class="string">&quot;DD&quot;</span>))</span></span>;</span><br><span class="line">    u_c_p2-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.(推荐) std::make_unique来创建</span></span><br><span class="line"></span><br><span class="line">    unique_ptr&lt;Cat&gt; u_c_p3 = <span class="built_in">make_unique</span>&lt;Cat&gt;();</span><br><span class="line">    u_c_p3-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cat address&quot;</span> &lt;&lt; u_c_p3.<span class="built_in">get</span>() &lt;&lt;  (*u_c_p3).<span class="built_in">get_name</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;  <span class="string">&quot;---- yz ----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unique-ptr与函数调用"><a href="#unique-ptr与函数调用" class="headerlink" title="unique_ptr与函数调用"></a>unique_ptr与函数调用</h3><ul><li>unique_ptr不能给copy只能move</li><li>在做函数参数或是返回值的中一定要注意所有权</li></ul><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_with_cat_pass_value</span><span class="params">(std::unique_ptr&lt;Cat&gt; c)</span> </span>&#123;</span><br><span class="line">    c-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_with_cat_pass_ref</span><span class="params">(<span class="type">const</span> std::unique_ptr&lt;Cat&gt; &amp;c)</span> </span>&#123; <span class="comment">//加const 不允许修改指向</span></span><br><span class="line">    c-&gt;<span class="built_in">set_cat_name</span>(<span class="string">&quot;coco&quot;</span>);</span><br><span class="line">    c-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    <span class="comment">// c.reset();//清空指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">unique_ptr&lt;Cat&gt; <span class="title">get_unique_ptr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unique_ptr&lt;Cat&gt; p_dog = <span class="built_in">make_unique</span>&lt;Cat&gt;(<span class="string">&quot;local dog&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> p_dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.传值</span></span><br><span class="line">    std::unique_ptr&lt;Cat&gt; c1 = <span class="built_in">make_unique</span>&lt;Cat&gt;(<span class="string">&quot;ff&quot;</span>);</span><br><span class="line">    <span class="built_in">do_with_cat_pass_value</span>(std::<span class="built_in">move</span>(c1));</span><br><span class="line">    <span class="comment">//c1-&gt;cat_info(); // 不能调用</span></span><br><span class="line">    <span class="built_in">do_with_cat_pass_value</span>(<span class="built_in">make_unique</span>&lt;Cat&gt;(<span class="string">&quot;sjs&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.传引用</span></span><br><span class="line">    std::unique_ptr&lt;Cat&gt; c2 = <span class="built_in">make_unique</span>&lt;Cat&gt;(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">    <span class="built_in">do_with_cat_pass_ref</span>(c2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式</span></span><br><span class="line">    <span class="built_in">get_unique_ptr</span>()-&gt;<span class="built_in">cat_info</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><ul><li>需要使用std::move来转移内存的使用权</li><li>参数如果直接传入std::make_unique语句 自动转换为move</li></ul><h4 id="传引用"><a href="#传引用" class="headerlink" title="传引用"></a>传引用</h4><ul><li>参数如果为const则不能改变指向</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>指向一个本地对象</li><li>可以用做链式函数</li></ul><h2 id="计数指针：shared-ptr"><a href="#计数指针：shared-ptr" class="headerlink" title="计数指针：shared_ptr"></a>计数指针：shared_ptr</h2><ul><li>shared_ptr创建了一个计数器与类对象所指的内存相关联</li><li>copy计数器加一，销毁计数器减一</li><li>所有指向同一内存的共享指针最后只消毁一次堆内存，因为堆内存只分配了一次，所有的共享指针（计数指针）都维护的同一块堆内存</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量类型</span></span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt;ip1 = <span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; *ip1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//copy</span></span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; ip2 = ip1;</span><br><span class="line">    *ip2 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt;ip3 = ip1;</span><br><span class="line">    ip2 = <span class="literal">nullptr</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;count1: &quot;</span> &lt;&lt; ip1.<span class="built_in">use_count</span>() &lt;&lt; endl;  <span class="comment">//输出2，因为其中一个已经被释放</span></span><br><span class="line">    <span class="comment">//自定义类型</span></span><br><span class="line">    shared_ptr&lt;Cat&gt; cp4 = <span class="built_in">make_shared</span>&lt;Cat&gt;(<span class="string">&quot;xiaomao&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cp4 count&quot;</span> &lt;&lt; cp4.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论有多少计数指针指向堆内存，最后都只销毁一次 <strong><code>销毁条件：</code></strong> 计数器为0 的时候就销毁</p><h3 id="shared-ptr-与函数"><a href="#shared-ptr-与函数" class="headerlink" title="shared_ptr 与函数"></a>shared_ptr 与函数</h3><ul><li>传参进入函数之后，虽然变量是两个，但是指向的是同一块内存，改变其中之一，另外一个也会随着发生改变</li></ul><h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cat_by_value</span><span class="params">(shared_ptr&lt;Cat&gt; cat)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; cat-&gt;<span class="built_in">get_name</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fuc Use count&quot;</span> &lt;&lt; cat.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cat_by_ref</span><span class="params">(shared_ptr&lt;Cat&gt; cat)</span> </span>&#123; <span class="comment">//如果加上const修饰就无法使用reset</span></span><br><span class="line">    cout &lt;&lt; cat-&gt;<span class="built_in">get_name</span>() &lt;&lt; endl;</span><br><span class="line">    cat.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">Cat</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fuc Use count&quot;</span> &lt;&lt; cat.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    shared_ptr&lt;Cat&gt; c1 = <span class="built_in">make_shared</span>&lt;Cat&gt;(<span class="string">&quot;dd&quot;</span>); </span><br><span class="line">    <span class="built_in">cat_by_value</span>(c1);<span class="comment">//传参进入后，计数器会加一，出函数后又会减一，所以这个use_count是1，函数里的use_count是2</span></span><br><span class="line">    <span class="built_in">cat_by_ref</span>(c1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="shared-ptr与unique-ptr"><a href="#shared-ptr与unique-ptr" class="headerlink" title="shared_ptr与unique_ptr"></a>shared_ptr与unique_ptr</h2><ul><li>不能将shared_ptr转换为weak_ptr</li><li>建议将函数返回值为unique_ptr，随时可以改变为shared_ptr提高代码的复用率</li></ul><h4 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cat.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    unique_ptr&lt;Cat&gt; cp1 = <span class="built_in">make_unique</span>&lt;Cat&gt;(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    shared_ptr&lt;Cat&gt; cp2 = <span class="built_in">move</span>(cp1);    <span class="comment">//所有权转移</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; cp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环依赖问题：？？？需要使用weak_ptr</p><ul><li>weak_ptr可以通过lock()函数提升为shared_ptr</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++编译命令</title>
      <link href="/2022/10/20/C++%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/10/20/C++%E7%BC%96%E8%AF%91%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="c-之编译命令"><a href="#c-之编译命令" class="headerlink" title="c++之编译命令"></a>c++之编译命令</h1><ul><li><p>gcc和g++是GNU中最流行的c&amp;c++编译器</p></li><li><p>对于 .c和.cpp文件，gcc分别当做c和cpp文件编译（cpp的语法规则比c的更强一些） &amp;#x20;<br>对于 .c和.cpp文件，g++则统一当做cpp文件编译</p></li></ul><h3 id="编译的四个阶段"><a href="#编译的四个阶段" class="headerlink" title="编译的四个阶段"></a>编译的四个阶段</h3><ol><li><p>预处理：编译处理宏定义等命令，生成.i文件</p></li><li><p>编译：将预处理后的文件转换为汇编语言，生成.s文件</p></li><li><p>汇编：由汇编文件翻译为二进制目标文件，生成.o文件或者.obj文件(Windows)</p></li><li><p>链接：多个二进制目标文件结合库函数合成独立执行的执行文件.out,或者.exe</p></li></ol><blockquote><p>📌<strong>c++的编译原则：</strong><br>c++编译遵循独立编译原则，每个文件单独编译，每一个文件生成对于的目标文件.o，一个cpp文件中的函数调用，编译器会寻找其实现，如果没有找到（有可能在其他文件中实现），就用一个符号代替，之后交给连接器来找对应函数的实现，这个时候如果找不到就会报错。</p></blockquote><blockquote><p>📌<strong>函数模板的编译：</strong><br>编译器会对函数模板进行<strong>二次</strong>编译，在声明函数模板的地方进行一次编译，在调用的地方在编译一次，声明是不会编译的，cpp文件才进行编译，模板类是两次编译的，编译模板的时候不能分文件编译，写模板的时候一般头文件和cpp文件放在同一个文件中(hpp)，引用的时候直接引用hpp，可以保证两次编译，产生具体的类。</p></blockquote><h3 id="编译过程（-o-lt-文件名-gt-指定文件输出）"><a href="#编译过程（-o-lt-文件名-gt-指定文件输出）" class="headerlink" title="编译过程（-o &lt;文件名&gt;指定文件输出）"></a>编译过程（-o &lt;文件名&gt;指定文件输出）</h3><p>以main.cpp为例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; num&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> avr = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i:num) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    avr = sum / num.<span class="built_in">size</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;计算平均值:&quot;</span> &lt;&lt; avr &lt;&lt; <span class="string">&quot;计算总和:&quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="预处理，预编译"><a href="#预处理，预编译" class="headerlink" title="预处理，预编译"></a>预处理，预编译</h4><p>命令： <code>g++ -E main.cpp &gt; main.i</code></p><p>作用：宏的替换，注释的消除</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>命令：<code>g++ -std=c++11 -S main.cpp</code>(使用了std::vector,用c++11编译)</p><ul><li>可以直接编译-i或者编译.cpp文件，后者又执行第一步</li></ul><h4 id="汇编-汇编器"><a href="#汇编-汇编器" class="headerlink" title="汇编(汇编器)"></a>汇编(汇编器)</h4><p>命令：</p><p><code>g++ -c -std=c++11 main.cpp</code></p><p><code>g++ -c  main.s</code></p><p><code>g++ -c -std=c++11 main.i</code></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>命令：</p><p><code>g++ -std=c++11 main.cpp -o main.out</code></p><p>不指定新文件名则默认为a.exe或a.out</p><h4 id="动态链接库和静态链接库"><a href="#动态链接库和静态链接库" class="headerlink" title="动态链接库和静态链接库"></a>动态链接库和静态链接库</h4><ul><li><p>静态链接库(xx.a)包含在可执行文件中，可以单独运行</p></li><li><p>动态链接库(xx.so)不包含在可执行文件中，运行的时候需要配合动态链接库文件启动</p></li></ul><p>链接包含该笔记所有内容</p><p><a href="https://blog.csdn.net/sinat_39037205/article/details/121869349">https://blog.csdn.net/sinat_39037205/article/details/121869349</a></p><p><a href="https://blog.csdn.net/weixin_44517656/article/details/110673468">https://blog.csdn.net/weixin_44517656/article/details/110673468</a></p><h2 id="重要编译参数"><a href="#重要编译参数" class="headerlink" title="重要编译参数"></a>重要编译参数</h2><h3 id="g"><a href="#g" class="headerlink" title="-g"></a>-g</h3><p>编译带调试信息的可执行文件，可执行文件会稍大一些</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="-O(n)"></a>-O(n)</h3><ul><li>大写O</li></ul><p>优化源代码</p><p>优化就是省略掉代码中从未使用过的变量，直接将常量表达式用结果值代替等等</p><ul><li><p>-O 效果等价于-O1</p></li><li><p>-O0 不做优化</p></li><li><p>-O1 为默认优化</p></li><li><p>-O2 除了上述优化之外，还进行一些额外的工作，如指令调整</p></li><li><p>-O3 包括循环展开和其他一些处理特性相关的优化工作</p></li><li><p>Linux time命令可以量化执行时间</p></li></ul><h3 id="l-或-L"><a href="#l-或-L" class="headerlink" title="-l  或 -L"></a>-l  或 -L</h3><ul><li>指定库文件&#x2F;指定库文件路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -l 用来指定程序要链接的库， -l参数紧接着就是库名</span></span><br><span class="line"><span class="comment"># 在/lib和/usr/lib和/usr/local/lib里的库直接通过-l就能链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接glog库</span></span><br><span class="line">g++ -lglog test.cpp</span><br><span class="line"><span class="comment">## 如果库文件没在这三个名录里面则需要通过-L指定库文件所在的目录</span></span><br><span class="line"><span class="comment"># 链接mytest库</span></span><br><span class="line">g++ -L /home/bing/mytestlib -lmytest test.cpp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="I"><a href="#I" class="headerlink" title="-I"></a>-I</h3><p>指定头文件搜索目录</p><ul><li>默认目录 &#x2F;usr&#x2F;include，不需要额外指定</li></ul><p>自定义头文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -I/Myinclude test.cpp</span><br></pre></td></tr></table></figure><h3 id="Wall"><a href="#Wall" class="headerlink" title="-Wall"></a>-Wall</h3><p>打印警告信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -Wall test.cpp</span><br></pre></td></tr></table></figure><h3 id="w"><a href="#w" class="headerlink" title="-w"></a>-w</h3><p>关闭警告信息</p><h3 id="std-x3D-c-11"><a href="#std-x3D-c-11" class="headerlink" title="-std&#x3D;c++11"></a>-std&#x3D;c++11</h3><p>设置编译标准</p><h3 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h3><p>指定输出文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定输出文件名为main</span></span><br><span class="line">g++ -std=c++11 -o main</span><br></pre></td></tr></table></figure><h3 id="D"><a href="#D" class="headerlink" title="-D"></a>-D</h3><p>定义宏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的场景</span></span><br><span class="line"><span class="comment"># -DDEBUG 执行#ifdef DEBUG的部分</span></span><br></pre></td></tr></table></figure><p>man  gcc  帮助</p><h2 id="生成库文件"><a href="#生成库文件" class="headerlink" title="生成库文件"></a>生成库文件</h2><h4 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h4><ol><li><p>生成二进制文件 .o</p></li><li><p><code>ar rs</code>命令归档生成.a文件<br>需要用二进制文件.o来生成，否则会报错</p></li><li><p>编译</p></li></ol><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── a.out</span><br><span class="line">├── main</span><br><span class="line">├── main.cpp</span><br><span class="line">└── src</span><br><span class="line">    ├── libprintstr.a</span><br><span class="line">    ├── pr.h</span><br><span class="line">    ├── printStr.cpp</span><br><span class="line">    └── printStr.o</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 第一步</span></span><br><span class="line">g++ printStr.cpp  -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line"><span class="comment"># 使用源文件进行归档会报错 ：error adding symbols: archive has no index; run ranlib to add one</span></span><br><span class="line"><span class="comment"># collect2: error: ld returned 1 exit statu</span></span><br><span class="line"><span class="comment"># ar rs libprintstr.a printStr.cpp</span></span><br><span class="line">ar rs libprintstr.a printStr.o</span><br><span class="line"><span class="comment"># 第三步  指定库名，路径</span></span><br><span class="line">g++ main.cpp -lprintstr -Lsrc -o main</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># libpr.so 在src目录下 -fPIC实现真正的共享库</span></span><br><span class="line">g++ printStr.cpp -fPIC -shared -o libpr.so</span><br><span class="line"></span><br><span class="line">g++ main.cpp -lpr -Lsrc -o m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LD_LIBRARY_PATH=src ./m</span><br><span class="line"><span class="comment"># 前面的src代表库文件的路径 m代表可执行文件名 这样才可以正确连接到动态库</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句</title>
      <link href="/2022/10/20/SQL%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/10/20/SQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><ul><li><ul><li><p><a href="#%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2">服务的启动和停止</a></p></li><li><p><a href="#mysql%E7%9A%84%E9%93%BE%E6%8E%A5">MySQL的链接</a></p></li></ul></li></ul></li><li><p><a href="#sql%E9%80%9A%E7%94%A8%E8%AF%AD%E6%B3%95">SQL通用语法</a></p><ul><li><ul><li><a href="#sql%E5%88%86%E7%B1%BB">SQL分类</a></li></ul></li><li><p><a href="#ddl-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80">DDL-数据定义语言</a></p><ul><li><a href="#ddl-%E8%A1%A8%E6%93%8D%E4%BD%9C">DDL-表操作</a></li></ul></li><li><p><a href="#dml-%E5%A2%9E%E5%88%A0%E6%94%B9">DML-增删改</a></p></li><li><p><a href="#dql-%E6%9F%A5%E8%AF%A2">DQL-查询</a></p><ul><li><p><a href="#%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2">基本查询：</a></p></li><li><p><a href="#%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">条件查询：</a></p></li><li><p><a href="#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0">聚合函数：</a></p></li></ul></li></ul></li></ul><h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><h4 id="服务的启动和停止"><a href="#服务的启动和停止" class="headerlink" title="服务的启动和停止"></a>服务的启动和停止</h4><p>启动：<code>net start mysql</code></p><p>停止：<code>net stop mysql</code></p><p>进入服务管理：<code>services.msc</code></p><h4 id="MySQL的链接"><a href="#MySQL的链接" class="headerlink" title="MySQL的链接"></a>MySQL的链接</h4><p><code>mysql -h 127.0.0.1 -P 3306 -u root -p</code></p><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ol><li><p>SQL语句可以单行多行书写，以分号结尾</p></li><li><p>可以使用空格或者缩进</p></li><li><p>MySQL数据库的SQL语句不区分大小学，但是建议使用大写</p></li><li><p>注释：</p><ul><li><p>单行注释：<code>--</code>或者<code>#</code></p></li><li><p>多行注释：<code>/**/</code></p></li></ul></li></ol><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><ul><li><p>DDL：数据定义语言</p></li><li><p>DML：增删改</p></li><li><p>DQL：查询</p></li><li><p>DCL：数据控制语言，创建用户，修改用户的权限</p></li></ul><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL-数据定义语言"></a>DDL-数据定义语言</h3><ol><li><p>查询</p><ul><li><p>查询所有数据库：<code>SHOW DATABASES;</code></p></li><li><p>查询当前数据库：<code>SELECT DATABASE();</code></p></li></ul></li><li><p>创建</p><ul><li><p><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集 ] [ COLLATE 排序规则 ];</code></p></li><li><p>创建新数据库：<code>CREATE DATABASE itcase;</code></p></li><li><p>创建已有的数据库：<code>CREATE DATABASE if not exists itcase;</code>,会报警告，但是不会报错</p></li><li><p>指定字符集创建：<code>create database itheima default charset utf8mb4</code>,utf8mb4是以四个字节存储汉字的，MySQL中不建议使用utf-8字符集</p></li></ul></li><li><p>删除</p><ul><li><code>DROP DATABASE [ IF EXISTS ] 数据库名</code></li></ul></li><li><p>使用</p><ul><li><code>USE 数据库名</code></li></ul></li></ol><h4 id="DDL-表操作"><a href="#DDL-表操作" class="headerlink" title="DDL-表操作"></a>DDL-表操作</h4><ul><li><p>查询当前数据库的所有表：<code>SHOW TABLES;</code></p></li><li><p>查询表结构：<code>DESC 表名</code></p></li><li><p>查询指定表的建表语句：<code>SHOW CREATE TABLE 表名</code></p></li><li><p>创建表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段<span class="number">1</span>  字段<span class="number">1</span>类型  [ COMMENT 字段<span class="number">1</span>注释 ],</span><br><span class="line">字段<span class="number">2</span>  字段<span class="number">2</span>类型  [ COMMENT 字段<span class="number">2</span>注释 ],</span><br><span class="line">字段<span class="number">3</span>  字段<span class="number">3</span>类型  [ COMMENT 字段<span class="number">3</span>注释 ]</span><br><span class="line">) [ COMMENT 表注释 ];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_aQ1GsHOcxu.png"></p></li><li><p>数据类型：</p><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_r7Fbv-NOj9.png"></p><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_r6G4DIl0QZ.png"></p><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_C1kx4LX9w1.png"></p><ul><li><p>core double(4,1)→4代表最长四位数，1代表一位小数</p></li><li><p>varchar()类型性能相比char()性能差一些，但是会根据内容调整内存占用的大小</p></li></ul></li><li><p>修改表</p><ul><li><p>增加字段：<code>ALTER TABLE 表名 ADD 字段名 类型(长度) [ comment 注释] [ 约束 ]</code></p></li><li><p>修改字段数据类型：<code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度)</code></p></li><li><p>修改字段名和数据类型：<code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [ COMMENT 注释 ] [ 约束 ]</code></p></li><li><p>删除字段：<code>ALTER TABLE 表名 DROP 字段名</code></p></li><li><p>修改表名：<code>ALTER TABLE 表名 RENAME TO 新表名</code></p></li><li><p>删除表：<code>DROP TABLE [ IF EXISTS ] 表名</code></p></li><li><p>删除表并重新创建该表(清空数据)：<code>TRUNCATE TABLE 表名</code></p></li></ul></li></ul><h3 id="DML-增删改"><a href="#DML-增删改" class="headerlink" title="DML-增删改"></a>DML-增删改</h3><ul><li><p>指定字段添加数据：<code>INSERT INTO 表名(字段1，字段2，...) VALUES (值1，值2，...)</code></p></li><li><p>全部字段添加数据：<code>INSERT INTO 表名 VALUES(值1，值2，...)</code></p></li><li><p>批量增加数据：<code>INSERT INTO 表名(字段1，字段2，...) VALUES (值1，值2，...),(值1，值2，...)</code></p></li><li><p>批量添加数据：<code>INSERT INTO 表名 VALUES (值1，值2，...),(值1，值2，...)</code></p><blockquote><p>📌添加数据的时候字符串数据和日期类数据应该在引号内，并且长度应该在规定范围内</p></blockquote></li><li><p>修改：<code>UPDATE 表名 SET 字段名1 ＝ 值1,字段名2 ＝ 值2 [ WHERE 条件]</code></p></li><li><p>删除数据：DELETE FROM 表名 [ WHRER 条件 ]</p><blockquote><p>📌不能删除某个字段的数据，需要删除的话用UPDATE 将该数据指定为NULL</p></blockquote></li></ul><h3 id="DQL-查询"><a href="#DQL-查询" class="headerlink" title="DQL-查询"></a>DQL-查询</h3><p>关键字：<code>SELECT</code></p><p>通配符：<code>*</code></p><blockquote><p>📌尽量不要使用 *，不直观，影响效率</p></blockquote><ul><li><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">  分页参数</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="基本查询："><a href="#基本查询：" class="headerlink" title="基本查询："></a>基本查询：</h4><ul><li><p>查询多个字段：<code>SELECT 字段1，字段2 FROM 表名</code></p></li><li><p>查询所有：<code>SELECT * FROM 表名</code></p></li><li><p>设置别名：<code>SELECT 字段1 [ AS 别名 ] FROM 表名</code></p></li><li><p>去除重复记录：<code>SELECT DISTINCT 字段列表 FROM 表名</code></p></li></ul><h4 id="条件查询："><a href="#条件查询：" class="headerlink" title="条件查询："></a>条件查询：</h4><p>运算符：</p><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_wUDEI6g_he.png"></p><ul><li><p>举例1：<code>mysql&gt; select * from tb_user where id &gt; 1;</code></p></li><li><p>举例2：<code>mysql&gt; select * from tb_user where id is not null;</code></p></li><li><p>举例3：<code>mysql&gt; select * from tb_user where id between 1 and 20;</code></p></li><li><p>举例4：<code>mysql&gt; select * from tb_user where id in(1,2,3);</code> 查询年龄为1，2，3的</p></li><li><p>举例5：<code>mysql&gt; select * from tb_user where name like &#39;__&#39;;</code> 名字为两个字</p></li><li><p>举例6：<code>mysql&gt; select * from tb_user where name like &#39;%x&#39;;</code> 名字最后为x</p></li></ul><h4 id="聚合函数："><a href="#聚合函数：" class="headerlink" title="聚合函数："></a>聚合函数：</h4><p>将一列数据作为 一个整体，进行纵向运算</p><p>常见聚合函数：</p><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image_la1HYWZ7QQ.png"></p><p>语法：<code>SELECT 聚合函数(字段列表) FROM 表名</code></p><blockquote><p>📌NULL值不参与运算</p></blockquote><p><code>select distinct id as &#39;编号&#39; from tb_user;</code></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UOS配置图床</title>
      <link href="/2022/10/20/UOS%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/10/20/UOS%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提条件：</p></blockquote><ol><li>安装nodejs</li><li>安装npm</li></ol><h3 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装picgo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install picgo -g</span><br></pre></td></tr></table></figure><p>picgo安装位置：<code>/usr/local/lib/node_modules/picgo</code></p><h3 id="检验安装"><a href="#检验安装" class="headerlink" title="检验安装"></a>检验安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo -v</span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 文件 .config.josn</span><br><span class="line"># 路径 ~/.picgo/config.json</span><br><span class="line"># 方式 腾讯云</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;smms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tcyun&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;secretId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;secretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shortKey&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;picgo:upload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommandOrControl+Shift+P&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;upload&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快捷上传&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">36677</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;privacyEnsure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;showUpdateTip&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PICGO_ENV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GUI&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;needReload&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="typora配置"><a href="#typora配置" class="headerlink" title="typora配置"></a>typora配置</h3><p><img src="https://mhduiy-1310556463.cos.ap-chongqing.myqcloud.com/img/image.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
